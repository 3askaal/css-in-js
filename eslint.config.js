import { readFileSync } from 'fs'
import { parser, plugin as tseslintPlugin } from 'typescript-eslint'
import sortKeysCustomOrder from 'eslint-plugin-sort-keys-custom-order'
import * as importPlugin from 'eslint-plugin-import'
import promisePlugin from 'eslint-plugin-promise'
import nodePlugin from 'eslint-plugin-n'

// CSS properties custom order
const props = JSON.parse(readFileSync(new URL('./src/core/constants/props.json', import.meta.url)))

export default [
  {
    files: ['{src,app}/**/*.{ts,tsx}'],
    languageOptions: {
      parser,
      parserOptions: {
        ecmaFeatures: { jsx: true },
        ecmaVersion: 2024,
        project: './tsconfig.json'
      }
    },
    plugins: {
      '@typescript-eslint': tseslintPlugin,
      import: importPlugin,
      n: nodePlugin,
      promise: promisePlugin,
      'sort-keys-custom-order': sortKeysCustomOrder
    },
    rules: {
      // typescript
      '@typescript-eslint/adjacent-overload-signatures': ['error'],
      '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
      '@typescript-eslint/await-thenable': ['error'],
      '@typescript-eslint/ban-ts-comment': ['error', { minimumDescriptionLength: 3, 'ts-check': false, 'ts-expect-error': 'allow-with-description', 'ts-ignore': true, 'ts-nocheck': true }],
      '@typescript-eslint/ban-tslint-comment': ['error'],
      '@typescript-eslint/consistent-generic-constructors': ['error', 'constructor'],
      '@typescript-eslint/consistent-indexed-object-style': ['error', 'record'],
      '@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'as', objectLiteralTypeAssertions: 'never' }],
      '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
      '@typescript-eslint/consistent-type-exports': ['error',{ fixMixedExportsWithInlineTypeSpecifier: true}],
      '@typescript-eslint/consistent-type-imports': ['error', { disallowTypeAnnotations: true, fixStyle: 'inline-type-imports', prefer: 'type-imports' }],
      '@typescript-eslint/dot-notation': ['error'],
      '@typescript-eslint/explicit-function-return-type': ['error', { allowDirectConstAssertionInArrowFunctions: true, allowExpressions: true, allowHigherOrderFunctions: true, allowTypedFunctionExpressions: true }],
      '@typescript-eslint/init-declarations': ['error', 'always'],
      '@typescript-eslint/max-params': ['error', { max: 4 }],
      '@typescript-eslint/method-signature-style': ['error'],
      '@typescript-eslint/naming-convention': ['error', { format: ['camelCase', 'PascalCase', 'UPPER_CASE'], leadingUnderscore: 'allow', selector: 'variableLike', trailingUnderscore: 'allow' }],
      '@typescript-eslint/no-array-constructor': ['error'],
      '@typescript-eslint/no-array-delete': ['error'],
      '@typescript-eslint/no-base-to-string': ['error'],
      '@typescript-eslint/no-confusing-non-null-assertion': ['error'],
      '@typescript-eslint/no-confusing-void-expression': ['error', { ignoreArrowShorthand: false, ignoreVoidOperator: false }],
      '@typescript-eslint/no-duplicate-enum-values': ['error'],
      '@typescript-eslint/no-duplicate-type-constituents': ['error', { ignoreIntersections: false, ignoreUnions: false }],
      '@typescript-eslint/no-dynamic-delete': ['error'],
      '@typescript-eslint/no-empty-function': ['error', { allow: [] }],
      '@typescript-eslint/no-empty-object-type': ['error', { allowInterfaces: 'with-single-extends', allowObjectTypes: 'never' }],
      '@typescript-eslint/no-explicit-any': ['error', { fixToUnknown: false, ignoreRestArgs: false }],
      '@typescript-eslint/no-extra-non-null-assertion': ['error'],
      '@typescript-eslint/no-floating-promises': ['error'],
      '@typescript-eslint/no-for-in-array': ['error'],
      '@typescript-eslint/no-implied-eval': ['error'],
      '@typescript-eslint/no-import-type-side-effects': ['error'],
      '@typescript-eslint/no-inferrable-types': ['error', { ignoreParameters: false, ignoreProperties: false }],
      '@typescript-eslint/no-invalid-void-type': ['error'],
      '@typescript-eslint/no-loop-func': ['error'],
      '@typescript-eslint/no-loss-of-precision': ['error'],
      '@typescript-eslint/no-misused-new': ['error'],
      '@typescript-eslint/no-misused-promises': ['error'],
      '@typescript-eslint/no-namespace': ['error'],
      '@typescript-eslint/no-non-null-asserted-optional-chain': ['error'],
      // '@typescript-eslint/no-non-null-assertion': ['error'],
      '@typescript-eslint/no-redeclare': ['error', { builtinGlobals: false }],
      '@typescript-eslint/no-this-alias': ['error', { allowDestructuring: true }],
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': ['error'],
      '@typescript-eslint/no-unnecessary-type-assertion': ['error'],
      '@typescript-eslint/no-unnecessary-type-constraint': ['error'],
      '@typescript-eslint/no-unsafe-argument': ['error'],
      '@typescript-eslint/no-unsafe-function-type': ['error'],
      '@typescript-eslint/no-unused-expressions': ['error', { allowShortCircuit: true, allowTaggedTemplates: true, allowTernary: true, enforceForJSX: false }],
      '@typescript-eslint/no-unused-vars': ['error', { args: 'none', caughtErrors: 'none', ignoreRestSiblings: true, vars: 'all' }],
      '@typescript-eslint/no-use-before-define': ['error', { enums: false, functions: false, typedefs: false, variables: false }],
      '@typescript-eslint/no-useless-constructor': ['error'],
      '@typescript-eslint/no-var-requires': ['error'],
      '@typescript-eslint/no-wrapper-object-types': ['error'],
      '@typescript-eslint/non-nullable-type-assertion-style': ['error'],
      '@typescript-eslint/only-throw-error': ['error', { allowThrowingAny: false, allowThrowingUnknown: false }],
      '@typescript-eslint/prefer-function-type': ['error'],
      '@typescript-eslint/prefer-includes': ['error'],
      '@typescript-eslint/prefer-nullish-coalescing': ['error', { ignoreConditionalTests: false, ignoreMixedLogicalExpressions: false }],
      '@typescript-eslint/prefer-optional-chain': ['error'],
      '@typescript-eslint/prefer-promise-reject-errors': ['error'],
      '@typescript-eslint/prefer-readonly': ['error'],
      '@typescript-eslint/prefer-reduce-type-parameter': ['error'],
      '@typescript-eslint/prefer-return-this-type': ['error'],
      '@typescript-eslint/promise-function-async': ['error'],
      '@typescript-eslint/require-array-sort-compare': ['error', { ignoreStringArrays: true }],
      '@typescript-eslint/restrict-plus-operands': ['error', { skipCompoundAssignments: false }],
      '@typescript-eslint/restrict-template-expressions': ['error', { allowNumber: true }],
      '@typescript-eslint/return-await': ['error', 'always'],
      '@typescript-eslint/strict-boolean-expressions': ['error', { allowNullableBoolean: true, allowNullableString: true, allowNullableNumber: true, allowNullableEnum: true, allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: true }],
      '@typescript-eslint/triple-slash-reference': ['error'],
      '@typescript-eslint/unbound-method': ['error', { ignoreStatic: false }],

      // main
      'accessor-pairs': ['error', { setWithoutGet: true }],
      'array-bracket-spacing': ['error', 'never'],
      'array-callback-return': ['error', { allowImplicit: false, checkForEach: false }],
      'arrow-spacing': ['error', { after: true, before: true }],
      'block-spacing': ['error', 'always'],
      'brace-style': ['error', '1tbs', { allowSingleLine: true }],
      camelcase: ['error', { allow: ['^UNSAFE_'], ignoreGlobals: true, properties: 'never' }],
      'comma-dangle': ['error', { arrays: 'never', exports: 'never', functions: 'never', imports: 'never', objects: 'never' }],
      'comma-spacing': ['error', { after: true, before: false }],
      'comma-style': ['error', 'last'],
      'computed-property-spacing': ['error', 'never'],
      'constructor-super': 'error',
      curly: ['error', 'multi-line'],
      'default-case-last': 'error',
      'dot-location': ['error', 'property'],
      'dot-notation': ['error', { allowKeywords: true }],
      'eol-last': 'error',
      eqeqeq: ['error', 'always', { null: 'ignore' }],
      'func-call-spacing': ['error', 'never'],
      'generator-star-spacing': ['error', { after: true, before: true }],
      indent: ['error', 2],
      'key-spacing': ['error', { afterColon: true, beforeColon: false }],
      'keyword-spacing': ['error', { after: true, before: true }],
      'multiline-ternary': ['error', 'always-multiline'],
      'new-cap': ['error', { capIsNew: false, newIsCap: true, properties: true }],
      'new-parens': 'error',
      'no-array-constructor': 'error',
      'no-async-promise-executor': 'error',
      'no-caller': 'error',
      'no-case-declarations': 'error',
      'no-compare-neg-zero': 'error',
      'no-cond-assign': 'error',
      'no-const-assign': 'error',
      'no-constant-condition': ['error', { checkLoops: false }],
      'no-control-regex': 'error',
      'no-debugger': 'error',
      'no-delete-var': 'error',
      'no-dupe-args': 'error',
      'no-dupe-keys': 'error',
      'no-duplicate-case': 'error',
      'no-empty': ['error', { allowEmptyCatch: true }],
      'no-empty-pattern': 'error',
      'no-eval': 'error',
      'no-ex-assign': 'error',
      'no-extend-native': 'error',
      'no-extra-bind': 'error',
      'no-extra-boolean-cast': 'error',
      'no-extra-parens': ['error', 'functions'],
      'no-fallthrough': 'error',
      'no-floating-decimal': 'error',
      'no-func-assign': 'error',
      'no-global-assign': 'error',
      'no-implied-eval': 'error',
      'no-import-assign': 'error',
      'no-invalid-regexp': 'error',
      'no-irregular-whitespace': 'error',
      'no-iterator': 'error',
      'no-labels': ['error', { allowLoop: false, allowSwitch: false }],
      'no-lone-blocks': 'error',
      'no-loss-of-precision': 'error',
      'no-mixed-operators': 'error',
      'no-mixed-spaces-and-tabs': 'error',
      'no-multi-spaces': 'error',
      'no-multi-str': 'error',
      'no-multiple-empty-lines': ['error', { max: 1, maxBOF: 0, maxEOF: 0 }],
      'no-new': 'error',
      'no-new-func': 'error',
      'no-new-object': 'error',
      'no-new-symbol': 'error',
      'no-new-wrappers': 'error',
      'no-obj-calls': 'error',
      'no-octal': 'error',
      'no-octal-escape': 'error',
      'no-proto': 'error',
      'no-prototype-builtins': 'error',
      'no-redeclare': ['error', { builtinGlobals: false }],
      'no-regex-spaces': 'error',
      'no-return-assign': ['error', 'except-parens'],
      'no-self-assign': ['error', { props: true }],
      'no-self-compare': 'error',
      'no-sequences': 'error',
      'no-shadow-restricted-names': 'error',
      'no-sparse-arrays': 'error',
      'no-tabs': 'error',
      'no-template-curly-in-string': 'error',
      'no-this-before-super': 'error',
      'no-throw-literal': 'error',
      'no-trailing-spaces': 'error',
      'no-undef': 'error',
      'no-undef-init': 'error',
      'no-unexpected-multiline': 'error',
      'no-unmodified-loop-condition': 'error',
      'no-unneeded-ternary': ['error', { defaultAssignment: false }],
      'no-unreachable': 'error',
      'no-unreachable-loop': 'error',
      'no-unsafe-finally': 'error',
      'no-unsafe-negation': 'error',
      'no-unused-expressions': ['error', { allowShortCircuit: true, allowTaggedTemplates: true, allowTernary: true }],
      'no-unused-vars': ['error', { args: 'none', caughtErrors: 'none', ignoreRestSiblings: true, vars: 'all' }],
      'no-use-before-define': ['error', { functions: false, variables: false }],
      'no-useless-backreference': 'error',
      'no-useless-call': 'error',
      'no-useless-catch': 'error',
      'no-useless-computed-key': 'error',
      'no-useless-constructor': 'error',
      'no-useless-escape': 'error',
      'no-useless-rename': 'error',
      'no-useless-return': 'error',
      'no-var': 'warn',
      'no-void': 'error',
      'no-whitespace-before-property': 'error',
      'no-with': 'error',
      'object-curly-newline': ['error', { consistent: true, multiline: true }],
      'object-curly-spacing': ['error', 'always'],
      'object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],
      'object-shorthand': ['warn', 'properties'],
      'one-var': ['error', 'never'],
      'operator-linebreak': ['error', 'after', { overrides: { ':': 'before', '?': 'before', '|>': 'before' } }],
      'padded-blocks': ['error', { blocks: 'never', switches: 'never' }],
      'prefer-const': ['error', { destructuring: 'all' }],
      'prefer-promise-reject-errors': 'error',
      'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
      'quote-props': ['error', 'as-needed'],
      quotes: ['error', 'single', { allowTemplateLiterals: false, avoidEscape: true }],
      'rest-spread-spacing': ['error', 'never'],
      semi: ['error', 'never'],
      'semi-spacing': ['error', { after: true, before: false }],
      'space-before-blocks': ['error', 'always'],
      'space-before-function-paren': ['error', 'always'],
      'space-in-parens': ['error', 'never'],
      'space-infix-ops': 'error',
      'space-unary-ops': ['error', { nonwords: false, words: true }],
      'spaced-comment': ['error', 'always', { block: { balanced: true, exceptions: ['*'], markers: ['*package', '!', ',', ':', '::', 'flow-include'] }, line: { markers: ['*package', '!', '/', ',', '='] } }],
      'symbol-description': 'error',
      'template-curly-spacing': ['error', 'never'],
      'template-tag-spacing': ['error', 'never'],
      'unicode-bom': ['error', 'never'],
      'use-isnan': ['error', { enforceForIndexOf: true, enforceForSwitchCase: true }],
      'valid-typeof': ['error', { requireStringLiterals: true }],
      'wrap-iife': ['error', 'any', { functionPrototypeMethods: true }],
      'yield-star-spacing': ['error', 'both'],
      yoda: ['error', 'never'],

      // import
      'import/export': 'error',
      'import/first': 'error',
      'import/no-absolute-path': ['error', { amd: false, commonjs: true, esmodule: true }],
      'import/no-duplicates': 'error',
      'import/no-named-default': 'error',
      'import/no-webpack-loader-syntax': 'error',
      'import/order': ['error', { groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'] }],

      // node
      'n/handle-callback-err': ['error', '^(err|error)$'],
      'n/no-callback-literal': 'error',
      'n/no-deprecated-api': 'error',
      'n/no-exports-assign': 'error',
      'n/no-new-require': 'error',
      'n/no-path-concat': 'error',
      'n/process-exit-as-throw': 'error',

      // promise
      'promise/param-names': 'error',

      // sort-keys-custom-order
      'sort-keys-custom-order/object-keys': ['error', { sorting: 'none', orderedKeys: props }]
    }
  }
]
